{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError(\"Could not fetch the data\");\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"Nv+1/iI0zq+2TB3Cnf0Mf/1lILU=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","controller","AbortController","fetchData","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"sources":["/home/taner/React/book-app/src/hooks/useFetch.js"],"sourcesContent":["import {useState, useEffect} from 'react'\n\nexport const useFetch = (url) =>{\n    const [data, setData] = useState(null)\n    const [isPending, setIsPending] = useState(false)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        const controller = new AbortController()\n\n        const fetchData = async () => {\n            setIsPending(true)\n\n            try {\n                const res = await fetch(url, {signal: controller.signal})\n                if(!res.ok){\n                    throw new Error(res.statusText)\n                }\n                const data = await res.json()\n\n                setIsPending(false)\n                setData(data)\n                setError(null)\n            }\n            catch(err){\n                if (err.name === \"AbortError\"){\n                    console.log(\"the fetch was aborted\")\n                }\n                else{\n                    setIsPending(false)\n                    setError(\"Could not fetch the data\")\n                }\n            }\n\n        }\n\n        fetchData()\n\n        return () => {\n            controller.abort()\n        }\n    }, [url])\n\n    return {data, isPending, error}\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEzC,OAAO,MAAMC,QAAQ,GAAIC,GAAG,IAAI;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMU,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1BL,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACA,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACZ,GAAG,EAAE;UAACa,MAAM,EAAEL,UAAU,CAACK;QAAM,CAAC,CAAC;QACzD,IAAG,CAACF,GAAG,CAACG,EAAE,EAAC;UACP,MAAM,IAAIC,KAAK,CAACJ,GAAG,CAACK,UAAU,CAAC;QACnC;QACA,MAAMd,IAAI,GAAG,MAAMS,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7BZ,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,CACD,OAAMW,GAAG,EAAC;QACN,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAC;UAC1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACxC,CAAC,MACG;UACAhB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;QACxC;MACJ;IAEJ,CAAC;IAEDG,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACTF,UAAU,CAACc,KAAK,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,CAACtB,GAAG,CAAC,CAAC;EAET,OAAO;IAACE,IAAI;IAAEE,SAAS;IAAEE;EAAK,CAAC;AACnC,CAAC;AAAAL,EAAA,CA1CYF,QAAQ"},"metadata":{},"sourceType":"module"}