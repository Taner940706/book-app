{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState(null);\n  const postData = postData => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    });\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async fetchOptions => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          ...fetchOptions,\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError(\"Could not fetch the data\");\n        }\n      }\n    };\n    if (method === \"GET\") {\n      fetchData();\n    }\n    if (method === \"POST\" && options) {\n      fetchData(options);\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [url, method, options]);\n  return {\n    data,\n    isPending,\n    error,\n    postData\n  };\n};\n_s(useFetch, \"jhtbsK3xAuNX1VobfPSE0u2qfvE=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","method","arguments","length","undefined","data","setData","isPending","setIsPending","error","setError","options","setOptions","postData","headers","body","JSON","stringify","controller","AbortController","fetchData","fetchOptions","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"sources":["/home/taner/React/book-app/src/hooks/useFetch.js"],"sourcesContent":["import {useState, useEffect} from 'react'\n\nexport const useFetch = (url, method = \"GET\") =>{\n    const [data, setData] = useState(null)\n    const [isPending, setIsPending] = useState(false)\n    const [error, setError] = useState(null)\n    const [options, setOptions] = useState(null)\n\n    const postData = (postData) => {\n        setOptions({\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(postData)\n        })\n\n    }\n\n    useEffect(() => {\n        const controller = new AbortController()\n\n        const fetchData = async (fetchOptions) => {\n            setIsPending(true)\n\n            try {\n                const res = await fetch(url, {...fetchOptions,signal: controller.signal})\n                if(!res.ok){\n                    throw new Error(res.statusText)\n                }\n                const data = await res.json()\n\n                setIsPending(false)\n                setData(data)\n                setError(null)\n            }\n            catch(err){\n                if (err.name === \"AbortError\"){\n                    console.log(\"the fetch was aborted\")\n                }\n                else{\n                    setIsPending(false)\n                    setError(\"Could not fetch the data\")\n                }\n            }\n\n        }\n\n        if (method === \"GET\"){\n            fetchData()\n        }\n        if (method === \"POST\" && options){\n            fetchData(options)\n        }\n\n        return () => {\n            controller.abort()\n        }\n    }, [url, method, options])\n\n    return {data, isPending, error, postData}\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEzC,OAAO,MAAMC,QAAQ,GAAG,SAAAA,CAACC,GAAG,EAAoB;EAAAC,EAAA;EAAA,IAAlBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACxC,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMiB,QAAQ,GAAIA,QAAQ,IAAK;IAC3BD,UAAU,CAAC;MACPX,MAAM,EAAE,MAAM;MACda,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;IACjC,CAAC,CAAC;EAEN,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZ,MAAMqB,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMC,SAAS,GAAG,MAAOC,YAAY,IAAK;MACtCb,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACA,MAAMc,GAAG,GAAG,MAAMC,KAAK,CAACxB,GAAG,EAAE;UAAC,GAAGsB,YAAY;UAACG,MAAM,EAAEN,UAAU,CAACM;QAAM,CAAC,CAAC;QACzE,IAAG,CAACF,GAAG,CAACG,EAAE,EAAC;UACP,MAAM,IAAIC,KAAK,CAACJ,GAAG,CAACK,UAAU,CAAC;QACnC;QACA,MAAMtB,IAAI,GAAG,MAAMiB,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7BpB,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,CACD,OAAMmB,GAAG,EAAC;QACN,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAC;UAC1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACxC,CAAC,MACG;UACAxB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;QACxC;MACJ;IAEJ,CAAC;IAED,IAAIT,MAAM,KAAK,KAAK,EAAC;MACjBmB,SAAS,CAAC,CAAC;IACf;IACA,IAAInB,MAAM,KAAK,MAAM,IAAIU,OAAO,EAAC;MAC7BS,SAAS,CAACT,OAAO,CAAC;IACtB;IAEA,OAAO,MAAM;MACTO,UAAU,CAACe,KAAK,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,CAAClC,GAAG,EAAEE,MAAM,EAAEU,OAAO,CAAC,CAAC;EAE1B,OAAO;IAACN,IAAI;IAAEE,SAAS;IAAEE,KAAK;IAAEI;EAAQ,CAAC;AAC7C,CAAC;AAAAb,EAAA,CA3DYF,QAAQ"},"metadata":{},"sourceType":"module"}